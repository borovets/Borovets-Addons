#!/bin/sh

script_home="${0}"
script_folder="$(cd "$(dirname "$0")"; pwd)"
script_name="${0##*/}"

version="\
updatedb (GNU findutils) 4.6.0

Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.

License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

Written by Eric B. Decker, James Youngman, and Kevin Dalley."

usage="\
Usage: $script_name

[--findoptions='-option1 -option2...']
[--localpaths='dir1 dir2...'] [--netpaths='dir1 dir2...']
[--prunepaths='dir1 dir2...'] [--prunefs='fs1 fs2...']
[--output=dbfile] [--netuser=user] [--localuser=user]
[--old-format] [--dbformat] [--version] [--help]

Report bugs to <bug-findutils@gnu.org>."

changeto=/
old=no

for arg; do
	opt=`echo $arg | sed 's/^\([^=]*\).*/\1/'` || exit 71
	val=`echo $arg | sed 's/^[^=]*=\(.*\)/\1/'` || exit 71
	case "$opt" in
		--findoptions)
			FINDOPTIONS="$val"
		;;
		--localpaths)
			SEARCHPATHS="$val"
		;;
		--netpaths)
			NETPATHS="$val"
		;;
		--prunepaths)
			PRUNEPATHS="$val"
		;;
		--prunefs)
			PRUNEFS="$val"
		;;
		--output)
			LOCATE_DB="$val"
		;;
		--netuser)
			NETUSER="$val"
		;;
		--localuser)
			LOCALUSER="$val"
		;;
		--old-format)
			old=yes
		;;
		--changecwd)
			changeto="$val"
		;;
		--dbformat)
			dbformat="$val"
		;;
		--version)
			fail=0
			echo "$version" || fail=1
			exit $fail
		;;
		--help)
				fail=0
				echo "$usage" || fail=1
				exit $fail
		;;
		*)
			echo "updatedb: invalid option $opt

$usage" >&2
			exit 1
		;;
	esac
done

case "${dbformat:+yes}_${old}" in
	yes_yes)
		echo "The --dbformat and --old cannot both be specified." >&2
		exit 1
	;;
	*)
	;;
esac

if test "$old" = yes || test "$dbformat" = "old"; then
	echo "Warning: future versions of findutils will shortly discontinue support for the old locate database format." >&2
	old=yes
	sort="$script_folder/sort"
	print_option="-print"
	frcode_options=""
else
	frcode_options=""
	case "$dbformat" in
		"")
		;;
		LOCATE02)
		;;
		slocate)
			frcode_options="$frcode_options -S 1"
		;;
		*)
			echo "Unsupported locate database format ${dbformat}: Supported formats are:" >&2
			echo "LOCATE02, slocate, old" >&2
			exit 1
		esac
		if false; then
			sort="$script_folder/sort -z"
			print_option="-print0"
			frcode_options="$frcode_options -0"
		else
			sort="$script_folder/sort"
			print_option="-print"
	fi
fi

getuid() {
		id | cut -d'(' -f 1 | cut -d'=' -f2
}

select_shell() {
	if su "$1" -s $SHELL -c false < /dev/null; then
		echo ""
	else
		if su "$1" -s $SHELL -c true < /dev/null; then
			echo "-s $SHELL"
		else
			echo ""
		fi
	fi
}

: ${FINDOPTIONS=}
: ${SHELL="/system/bin/sh"}
: ${SEARCHPATHS="/"}
: ${NETPATHS=}
: ${PRUNEPATHS="
/afs
/amd
/proc
/sfs
/tmp
/usr/tmp
/var/tmp
"}

for p in $PRUNEPATHS; do
	case "$p" in
		/*/)
		echo "$0: $p: pruned paths should not contain trailing slashes" >&2
		exit 1
	esac
done

test -z "$PRUNEREGEX" &&
PRUNEREGEX=`echo $PRUNEPATHS|sed -e 's,^,\\\(^,' -e 's, ,$\\\)\\\|\\\(^,g' -e 's,$,$\\\),'`

mkdir -p /data/tmp /data/local

: ${LOCATE_DB=/data/local/locatedb}

if test -d "/tmp"; then
	: ${TMPDIR=/tmp}
elif test -d "/data/tmp"; then
	: ${TMPDIR=/data/tmp}
else
	: ${TMPDIR=/cache/tmp}
fi

export TMPDIR

: ${NETUSER=daemon}

if test -n "$LIBEXECDIR"; then
	: LIBEXECDIR already set, do nothing
else
	: ${LIBEXECDIR=/system/xbin}
fi

if test -n "$BINDIR"; then
	: BINDIR already set, do nothing
else
	: ${BINDIR=/system/xbin}
fi

: ${find:=${BINDIR}/find}
: ${frcode:=${LIBEXECDIR}/frcode}
: ${bigram:=${LIBEXECDIR}/bigram}
: ${code:=${LIBEXECDIR}/code}

make_tempdir () {
	{
		tmp=`(umask 077 && mktemp -d "$TMPDIR/updatedbXXXXXX") 2>/dev/null` &&
		test -n "$tmp" && test -d "$tmp"
	} || {
		ts=`date +%N%S || date +%S 2>/dev/null`
		tmp="$TMPDIR"/updatedb"$$"-"${RANDOM:-}${ts}"
		(umask 077 && mkdir "$tmp")
	}
	echo "$tmp"
}

checkbinary () {
	if test -x "$1"; then
		: ok
	else
		eval echo "updatedb needs to be able to execute $1, but cannot." >&2
		exit 1
	fi
}

for binary in $find $frcode $bigram $code; do
	checkbinary $binary
done

: ${PRUNEFS="
9P
NFS
afs
autofs
cifs
coda
devfs
devpts
ftpfs
iso9660
mfs
ncpfs
nfs
nfs4
proc
shfs
smbfs
sysfs
"}

if test -n "$PRUNEFS"; then
	prunefs_exp=`echo $PRUNEFS | sed -e 's/\([^ ][^ ]*\)/-o -fstype \1/g' \
 -e 's/-o //' -e 's/$/ -o/'`
else
	prunefs_exp=''
fi

rm -f $LOCATE_DB.n

trap 'rm -f $LOCATE_DB.n; exit' HUP TERM

if test $old = no; then
if {
	cd "$changeto"
	if test -n "$SEARCHPATHS"; then
		if [ "$LOCALUSER" != "" ]; then
			su $LOCALUSER `select_shell $LOCALUSER` -c \
			"$find $SEARCHPATHS $FINDOPTIONS \
			\\( $prunefs_exp \
			-type d -regex '$PRUNEREGEX' \\) -prune -o $print_option"
		else
			$find $SEARCHPATHS $FINDOPTIONS \
			\( $prunefs_exp \
			-type d -regex "$PRUNEREGEX" \) -prune -o $print_option
		fi
	fi
	if test -n "$NETPATHS"; then
		myuid=`getuid`
		if "$myuid" = 0; then
			su $NETUSER `select_shell $NETUSER` -c \
			"$find $NETPATHS $FINDOPTIONS \\( -type d -regex '$PRUNEREGEX' -prune \\) -o $print_option" ||
			exit $?
		else
			$find $NETPATHS $FINDOPTIONS \( -type d -regex "$PRUNEREGEX" -prune \) -o $print_option ||
			exit $?
		fi
	fi
	} | $sort -f | $frcode $frcode_options > $LOCATE_DB.n; then
		: OK so far
		true
	else
		rv=$?
		echo "Failed to generate $LOCATE_DB.n" >&2
		rm -f $LOCATE_DB.n
		exit $rv
	fi
	if test -s $LOCATE_DB.n; then
		chmod 644 ${LOCATE_DB}.n
		mv ${LOCATE_DB}.n $LOCATE_DB
	else
		echo "updatedb: new database would be empty" >&2
		rm -f $LOCATE_DB.n
	fi
	else
		if temp_directory="`make_tempdir`"; then
			bigrams="${temp_directory}"/bigrams
			filelist="${temp_directory}"/filelist
	else
		echo "failed to create temporary directory" >&2
	exit 1
fi

rm -f $LOCATE_DB.n

trap 'rm -f $LOCATE_DB.n; rm -rf "${temp_directory}"; exit' HUP TERM

{
cd "$changeto"
	if test -n "$SEARCHPATHS"; then
		if [ "$LOCALUSER" != "" ]; then
			su $LOCALUSER `select_shell $LOCALUSER` -c \
			"$find $SEARCHPATHS $FINDOPTIONS \
			\\( $prunefs_exp \
			-type d -regex '$PRUNEREGEX' \) -prune -o $print_option" ||
			exit $?
		else
			$find $SEARCHPATHS $FINDOPTIONS \
			\( $prunefs_exp \
			-type d -regex "$PRUNEREGEX" \) -prune -o $print_option ||
			exit $?
		fi
	fi
	if test -n "$NETPATHS"; then
		myuid=`getuid`
		if [ "$myuid" = 0 ]; then
			su $NETUSER `select_shell $NETUSER` -c \
			"$find $NETPATHS $FINDOPTIONS \\( -type d -regex '$PRUNEREGEX' -prune \\) -o $print_option" ||
			exit $?
		else
			$find $NETPATHS $FINDOPTIONS \( -type d -regex "$PRUNEREGEX" -prune \) -o $print_option ||
			exit $?
		fi
	fi
} | tr / '\001' | $sort -f | tr '\001' / > "$filelist"
	$bigram $bigram_opts < $filelist | sort | uniq -c | sort -nr |
	awk '{ if (NR <= 128) print $2 }' | tr -d '\012' > "$bigrams"
	$code "$bigrams" < "$filelist" > $LOCATE_DB.n
	rm -rf "${temp_directory}"
	if test -s $LOCATE_DB.n; then
		chmod 644 ${LOCATE_DB}.n
		mv ${LOCATE_DB}.n $LOCATE_DB
	else
		echo "updatedb: new database would be empty" >&2
		rm -f $LOCATE_DB.n
	fi
fi

exit 0
